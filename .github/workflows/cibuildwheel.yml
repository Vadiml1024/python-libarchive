name: Build and upload to PyPI using cibuildwheel

# Build on every branch push, tag push, and pull request change:
on: 
  push:
      braches:
        - cibuildwheel
  pull_request:
  workflow_dispatch:

# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published

env:
  libarchive_tag: v3.6.1
  

jobs:
  build_wheels:
    name: Build wheels on
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    steps:

    - name: Install dependencies
      run: |
        yum install -y epel-release libxml2-devel libzstd-devel xz-devel bzip2-devel
        yum install -y libacl-devel lz4-devel e2fsprogs-devel libb2-devel lzo-devel openssl-devel
        yum install -y librichacl-devel swig strace

    - name: Build libarchive C sources
      run: |
        cd /tmp
        git clone https://github.com/libarchive/libarchive.git libarchive-src    
        cd libarchive-src; git checkout ${{ env.libarchive_tag }}
        mkdir build-libarchive; cd build-libarchive
        cmake ../
        make -j$(nproc);  make install
        cd $GITHUB_WORKSPACE


    - uses: actions/checkout@v3


    - name: Build wheels
      uses: pypa/cibuildwheel@v2.9.0
      env:
        CIBW_ENVIRONMENT: INCLUDE=/usr/local/include  LIBARCHIVE_PREFIX=/usr/local
        CIBW_PYTHON_VERSIONS: 3.8,3.9,3.10
      
        

    - uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          dry_run: true
          # To test: repository_url: https://test.pypi.org/legacy/